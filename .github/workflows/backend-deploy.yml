name: Backend Deployment

on:
  push:
    branches:
      - main
    paths:
      - 'src/backend/**'
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: 'Deployment Environment'
        required: true
        default: 'staging'
        options:
          - staging
          - prod
      force_deploy:
        type: boolean
        description: 'Force deployment'
        required: false
        default: false

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: prior-auth-backend
  ECS_CLUSTER: prior-auth-cluster
  ECS_SERVICE: backend-service
  HIPAA_COMPLIANCE_LEVEL: strict
  DEPLOYMENT_TIMEOUT: '900'
  HEALTH_CHECK_GRACE_PERIOD: '60'
  TF_WORKSPACE: ${{ github.event.inputs.environment || 'staging' }}
  MONITORING_BASELINE: strict
  HIPAA_AUDIT_ENABLED: 'true'

jobs:
  deploy:
    name: Deploy Backend Service
    runs-on: ubuntu-latest
    timeout-minutes: 30
    environment:
      name: ${{ github.event.inputs.environment || 'staging' }}
      url: ${{ steps.deploy.outputs.service_url }}
    
    concurrency:
      group: deploy-${{ github.event.inputs.environment || 'staging' }}
      cancel-in-progress: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-deploy
          aws-region: ${{ env.AWS_REGION }}
          role-duration-seconds: 3600
          role-session-name: GithubActionsDeployment

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: true

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.5.0'
          terraform_wrapper: false

      - name: Run Container Security Scan
        uses: aquasecurity/trivy-action@v0.11.2
        with:
          image: ${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
          timeout: '10m'

      - name: Validate HIPAA Compliance
        run: |
          echo "Validating HIPAA compliance requirements..."
          python3 ./scripts/validate_hipaa_compliance.py \
            --environment ${{ github.event.inputs.environment || 'staging' }} \
            --audit-level strict \
            --check-encryption \
            --check-access-control \
            --check-audit-logging
          if [ $? -ne 0 ]; then
            echo "HIPAA compliance validation failed"
            exit 1
          fi

      - name: Build and Push Docker Image
        env:
          DOCKER_BUILDKIT: 1
        run: |
          docker build \
            --build-arg BUILD_VERSION=${{ github.sha }} \
            --build-arg APP_ENV=${{ github.event.inputs.environment || 'staging' }} \
            --file infrastructure/docker/backend.dockerfile \
            --tag ${{ env.ECR_REPOSITORY }}:${{ github.sha }} \
            --tag ${{ env.ECR_REPOSITORY }}:latest \
            --cache-from ${{ env.ECR_REPOSITORY }}:latest \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            .
          
          docker push ${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          docker push ${{ env.ECR_REPOSITORY }}:latest

      - name: Deploy Infrastructure
        id: terraform
        run: |
          cd infrastructure/terraform
          terraform init
          terraform workspace select ${{ env.TF_WORKSPACE }} || terraform workspace new ${{ env.TF_WORKSPACE }}
          terraform plan -out=tfplan \
            -var="environment=${{ github.event.inputs.environment || 'staging' }}" \
            -var="app_version=${{ github.sha }}"
          terraform apply -auto-approve tfplan

      - name: Update ECS Service
        id: deploy
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --force-new-deployment \
            --task-definition backend-${{ env.TF_WORKSPACE }}:${{ github.sha }} \
            --health-check-grace-period-seconds ${{ env.HEALTH_CHECK_GRACE_PERIOD }}

          # Wait for service stability
          aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }}

      - name: Verify Deployment Health
        run: |
          attempts=0
          max_attempts=10
          until curl -sf https://api.${{ env.TF_WORKSPACE }}.example.com/health || [ $attempts -eq $max_attempts ]
          do
            attempts=$((attempts + 1))
            sleep 30
          done
          
          if [ $attempts -eq $max_attempts ]; then
            echo "Health check failed after $max_attempts attempts"
            exit 1
          fi

      - name: Configure Monitoring
        run: |
          aws cloudwatch put-metric-alarm \
            --alarm-name backend-${{ env.TF_WORKSPACE }}-health \
            --alarm-description "Backend service health monitoring" \
            --metric-name HealthyHostCount \
            --namespace AWS/ApplicationELB \
            --statistic Average \
            --period 60 \
            --threshold 1 \
            --comparison-operator LessThanThreshold \
            --evaluation-periods 2 \
            --alarm-actions ${{ secrets.ALARM_TOPIC_ARN }}

      - name: Update Compliance Documentation
        if: success()
        run: |
          timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          cat << EOF > deployment-audit.json
          {
            "deployment_id": "${{ github.sha }}",
            "environment": "${{ env.TF_WORKSPACE }}",
            "timestamp": "$timestamp",
            "hipaa_compliant": true,
            "security_scan_passed": true,
            "encryption_enabled": true,
            "audit_logging_enabled": true
          }
          EOF
          
          aws s3 cp deployment-audit.json \
            s3://prior-auth-audit-logs/deployments/${{ env.TF_WORKSPACE }}/${{ github.sha }}.json

      - name: Notify Deployment Status
        if: always()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: 'deployments'
          slack-message: |
            *Backend Deployment Status*: ${{ job.status }}
            Environment: ${{ env.TF_WORKSPACE }}
            Version: ${{ github.sha }}
            Deployed by: ${{ github.actor }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}