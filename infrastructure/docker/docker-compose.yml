version: "3.9"

services:
  # Backend API Service
  backend:
    build:
      context: ../../src/backend
      dockerfile: Dockerfile
      target: runtime
      args:
        APP_ENV: production
        PYTHON_VERSION: "3.11"
    image: prior-auth-backend:${BUILD_VERSION:-latest}
    container_name: prior-auth-backend
    restart: unless-stopped
    environment:
      - APP_ENV=production
      - PYTHONPATH=/app/src
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=prior_auth_db
      - DB_SSL_MODE=verify-full
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_SSL=true
      - LOG_LEVEL=INFO
      - CORS_ORIGINS=https://*.example.com
      - HIPAA_AUDIT_ENABLED=true
      - SECURE_MODE=true
    ports:
      - "8000:8000"
    volumes:
      - backend_logs:/app/logs:rw
      - backend_data:/app/data:ro
      - ./certs:/app/certs:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: "1.5"
          memory: "2G"
        reservations:
          cpus: "0.5"
          memory: "1G"
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
    security_opt:
      - no-new-privileges:true
    read_only: true
    secrets:
      - db_password
      - ssl_certificate
    networks:
      - app_network

  # Web Frontend Service
  web:
    build:
      context: ../../src/web
      dockerfile: Dockerfile
      target: production
      args:
        VITE_API_URL: /api
        BUILD_VERSION: ${BUILD_VERSION:-latest}
    image: prior-auth-web:${BUILD_VERSION:-latest}
    container_name: prior-auth-web
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - web_logs:/var/log/nginx
      - ./certs:/etc/nginx/certs:ro
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: "1G"
        reservations:
          cpus: "0.25"
          memory: "512M"
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"
    security_opt:
      - no-new-privileges:true
    read_only: true
    networks:
      - app_network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: prior-auth-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=prior_auth_db
      - POSTGRES_USER_FILE=/run/secrets/db_user
      - POSTGRES_PASSWORD_FILE=/run/secrets/db_password
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: "2.0"
          memory: "4G"
        reservations:
          cpus: "1.0"
          memory: "2G"
    security_opt:
      - no-new-privileges:true
    secrets:
      - db_user
      - db_password
    networks:
      - app_network

  # Redis Cache
  redis:
    image: redis:7.0-alpine
    container_name: prior-auth-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --tls-port 6379 --tls-cert-file /run/secrets/redis_cert --tls-key-file /run/secrets/redis_key --tls-ca-cert-file /run/secrets/redis_ca
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: "2G"
        reservations:
          cpus: "0.5"
          memory: "1G"
    security_opt:
      - no-new-privileges:true
    secrets:
      - redis_cert
      - redis_key
      - redis_ca
    networks:
      - app_network

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      device: /data/postgres
      o: bind
  redis_data:
    driver: local
    driver_opts:
      type: none
      device: /data/redis
      o: bind
  backend_logs:
    driver: local
  backend_data:
    driver: local
  web_logs:
    driver: local

networks:
  app_network:
    driver: bridge
    internal: true
    driver_opts:
      encrypted: "true"
    ipam:
      driver: default
      config:
        - subnet: "172.28.0.0/16"

secrets:
  db_user:
    file: ../secrets/db_user.txt
  db_password:
    file: ../secrets/db_password.txt
  redis_cert:
    file: ../secrets/redis/cert.pem
  redis_key:
    file: ../secrets/redis/key.pem
  redis_ca:
    file: ../secrets/redis/ca.pem
  ssl_certificate:
    file: ../secrets/ssl/cert.pem